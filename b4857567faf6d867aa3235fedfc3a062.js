const AMP=1e-4;class Energizer{constructor(){this.motion=.05,this._amp=0,this._phase=1/0}excite(s){this._amp=s,this._phase=0}process(){return this._phase>2*Math.PI?0:(this._phase+=2*Math.PI/sampleRate/this.motion,this._amp*(1-Math.cos(this._phase)))}}class Filter{constructor(s,t){this._a=[2*-t*Math.cos(2*Math.PI*s/sampleRate),t*t],this._outputs=[0,0]}process(s){return s+=-this._a[0]*this._outputs[0]-this._a[1]*this._outputs[1],this._outputs[1]=this._outputs[0],this._outputs[0]=s,this._outputs[1]}}class EQ{constructor(s,t,e){this._b=[s,t,e],this._inputs=[0,0]}process(s){const t=this._b[0]*s+this._b[1]*this._inputs[0]+this._b[2]*this._inputs[1];return this._inputs[1]=this._inputs[0],this._inputs[0]=s,t}}class Shaker{constructor(s,t){this._numObjects=1,this._gain=0,this._shakeEnergy=0,this._soundLevel=0,this._soundDecay=s,this._systemDecay=t,this._energizer=new Energizer(.05),this._filter=new Filter(3200,.96,1),this._eq=new EQ(1,-1,0)}setParams({numObjects:s,motion:t}){this._numObjects=s,this._gain=Math.log(this._numObjects)/Math.log(4)*40/this._numObjects,this._energizer.motion=t}excite(s){this._energizer.excite(s)}process(){this._shakeEnergy+=this._energizer.process(),this._shakeEnergy*=this._systemDecay,1024*Math.random()<this._numObjects&&(this._soundLevel+=this._gain*this._shakeEnergy);const s=this._soundLevel*(2*Math.random()-1);return this._soundLevel*=this._soundDecay,this._eq.process(this._filter.process(s))}}class Processor extends AudioWorkletProcessor{constructor(){super(),this._shaker=new Shaker(.95,.999),this.port.onmessage=s=>{const{data:t}=s;switch(t.type){case"excite":this._shaker.excite(t.amp);break;case"params":this._shaker.setParams(t.params)}}}process(s,t){const e=t[0][0];for(let s=0;s<e.length;++s)e[s]=AMP*this._shaker.process();return!0}}registerProcessor("main",Processor);